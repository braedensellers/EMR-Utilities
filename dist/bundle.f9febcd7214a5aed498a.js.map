{"version":3,"file":"bundle.f9febcd7214a5aed498a.js","mappings":"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","sources":["webpack://emrUtilities/./src/medication.js","webpack://emrUtilities/./src/patient.js","webpack://emrUtilities/webpack/bootstrap","webpack://emrUtilities/webpack/runtime/define property getters","webpack://emrUtilities/webpack/runtime/global","webpack://emrUtilities/webpack/runtime/hasOwnProperty shorthand","webpack://emrUtilities/webpack/runtime/make namespace object","webpack://emrUtilities/webpack/runtime/publicPath","webpack://emrUtilities/./src/emr-utilities.js"],"sourcesContent":["/**\r\n * Class representing a medication.\r\n */\r\nexport default class Medication {\r\n    /**\r\n     * Create a medication.\r\n     * @param {string} name - The name of the medication.\r\n     * @param {string} reason - The reason for taking this medication.\r\n     */\r\n    constructor(name, reason) {\r\n        this.name = name.toString().trim();\r\n        this.reason = reason.toString().trim();\r\n    }\r\n\r\n    /**\r\n     * Prints the medication's name and reason.\r\n     */\r\n    say = () => console.log(`Medication: ${this.name}: ${this.reason}`);\r\n}\r\n\r\n/**\r\n * Formats an array of medication objects for usage in the EMR.\r\n * @param {Medication[]} medications - An array of medication objects.\r\n * @returns {string} The formatted string of medication objects.\r\n */\r\nexport function formatMedicationsForEmr(medications) {\r\n    const formattedStrings = medications.map((medicationData) => {\r\n        return `${medicationData.medication}:${medicationData.reason}`;\r\n    });\r\n\r\n    return formattedStrings.join(',');\r\n}\r\n","/**\r\n * Class representing a patient.\r\n */\r\nexport default class Patient {\r\n    /**\r\n     * Create a patient.\r\n     * @param {string} firstName - The patient's first name.\r\n     * @param {string} lastName - The patient's last name.\r\n     * @param {string} dateOfBirth - The patient's date of birth.\r\n     * @param {number} idFirstNameCount - The number of characters of the first name to use for the patient's ID.\r\n     * @param {number} idLastNameCount - The number of characters of the last name to use for the patient's ID.\r\n     */\r\n    constructor(firstName, lastName, dateOfBirth, idFirstNameCount = 1, idLastNameCount = 4) {\r\n        this.firstName = firstName.toString().trim();\r\n        this.lastName = lastName.toString().trim();\r\n        this.dateOfBirth = new Date(dateOfBirth);\r\n        this.id = this.generateId(idFirstNameCount, idLastNameCount);\r\n    }\r\n\r\n    /**\r\n     * Prints the patient's full name and date of birth to the console. For debugging.\r\n     */\r\n    say = () => console.log(`Patient: ${this.firstName} ${this.lastName} - ${this.dateOfBirth.toString()}`);\r\n\r\n    /**\r\n     * Prints the patient's ID to the console. For debugging.\r\n     */\r\n    sayId = () => console.log(`Patient ID: ${this.id}`);\r\n\r\n    /**\r\n     * Gets the patient's full name.\r\n     * @returns {string} The patient's full name.\r\n     */\r\n    name = () => this.firstName + \" \" + this.lastName;\r\n\r\n    /**\r\n     * Get's the patient's age.\r\n     * @returns {number} The patient's age.\r\n     */\r\n    age = () => new Date().getFullYear() - new Date(this.dateOfBirth).getFullYear();\r\n\r\n    /**\r\n     * Generates the patient's ID. This is done automatically when creating a new patient.\r\n     * @param {number} firstNameChars - The number of characters from the patient's first name to include in the ID.\r\n     * @param {number} lastNameChars - The number of characters from the patient's last name to include in the ID.\r\n     * @returns {string} The patient's generated ID.\r\n     */\r\n    generateId(firstNameChars = 4, lastNameChars = 4) {\r\n        const sanitizedFirstName = this.firstName.replace(/[^a-zA-Z]/g, '').toUpperCase();\r\n        const sanitizedLastName = this.lastName.replace(/[^a-zA-Z]/g, '').toUpperCase();\r\n\r\n        const truncatedFirstName = sanitizedFirstName.slice(0, firstNameChars).padEnd(firstNameChars, 'X');\r\n        const truncatedLastName = sanitizedLastName.slice(0, lastNameChars).padEnd(lastNameChars, 'X');\r\n\r\n        const formattedDateOfBirth = formatDateStringForId(this.dateOfBirth);\r\n\r\n        const newId = `${truncatedLastName}${truncatedFirstName}${formattedDateOfBirth}`;\r\n\r\n        return newId;\r\n    }\r\n}\r\n\r\n/**\r\n * Formats a date into the expected format for the patient's id. MMDDYY\r\n * @param {date} date - The date to format.\r\n * @returns {string} The formatted date for the patient's ID.\r\n */\r\nfunction formatDateStringForId(date) {\r\n    if (!(date instanceof Date) || isNaN(date))\r\n        throw new Error(\"Invalid date object provided.\");\r\n\r\n    const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n    const day = String(date.getDate()).padStart(2, \"0\");\r\n    const year = String(date.getFullYear()).slice(-2);\r\n\r\n    return `${month}${day}${year}`;\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import Patient from './patient.js';\r\nimport Medication from './medication.js';\r\nimport exphsLogo from './assets/exphs.png';\r\n\r\nconst regexName = /^[a-zA-Z]+ [a-zA-Z]+$/;\r\nconst regexMedicalRecordNumber = /^[a-zA-Z]+ [a-zA-Z]+$/;\r\n\r\nfunction validate(regex, value) {\r\n  return regex.test(value);\r\n}\r\n\r\nexport function createPatient(_firstName, _lastName, _dateOfBirth) {\r\n  return new Patient(_firstName, _lastName, _dateOfBirth);\r\n}\r\n\r\nexport function createMedication(_medication, _reason) {\r\n  return new Medication(_medication, _reason);\r\n}\r\n"],"names":["Medication","_createClass","name","reason","_this","_classCallCheck","_defineProperty","console","log","concat","toString","trim","default","formatMedicationsForEmr","medications","formattedStrings","map","medicationData","medication","join","Patient","firstName","lastName","dateOfBirth","idFirstNameCount","arguments","length","undefined","idLastNameCount","id","Date","getFullYear","generateId","key","value","firstNameChars","lastNameChars","sanitizedFirstName","replace","toUpperCase","sanitizedLastName","truncatedFirstName","slice","padEnd","truncatedLastName","formattedDateOfBirth","formatDateStringForId","newId","date","isNaN","Error","month","String","getMonth","padStart","day","getDate","year","exphsLogo","regexName","regexMedicalRecordNumber","validate","regex","test","createPatient","_firstName","_lastName","_dateOfBirth","createMedication","_medication","_reason"],"sourceRoot":""}