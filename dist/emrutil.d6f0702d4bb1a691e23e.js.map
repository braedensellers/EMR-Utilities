{"version":3,"file":"emrutil.d6f0702d4bb1a691e23e.js","mappings":"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","sources":["webpack://emr-utilities/./src/patient.js","webpack://emr-utilities/webpack/bootstrap","webpack://emr-utilities/webpack/runtime/compat get default export","webpack://emr-utilities/webpack/runtime/define property getters","webpack://emr-utilities/webpack/runtime/hasOwnProperty shorthand","webpack://emr-utilities/webpack/runtime/make namespace object","webpack://emr-utilities/./src/emr-utilities.js"],"sourcesContent":["/**\r\n * Class representing a patient.\r\n */\r\nclass Patient {\r\n    /**\r\n     * Create a patient.\r\n     * @param {string} firstName - The patient's first name.\r\n     * @param {string} lastName - The patient's last name.\r\n     * @param {string} dateOfBirth - The patient's date of birth.\r\n     * @param {number} idFirstNameCharCount - The number of characters of the first name to substring for the patient's ID.\r\n     */\r\n    constructor(firstName, lastName, dateOfBirth, idFirstNameCharCount = 1) {\r\n        this.firstName = firstName.toString().trim();\r\n        this.lastName = lastName.toString().trim();\r\n        this.dateOfBirth = dateOfBirth;\r\n\r\n        this.id = this.generateId(idFirstNameCharCount, 4);\r\n    }\r\n\r\n    /**\r\n     * Prints the patient's full name and date of birth to the console. For debugging.\r\n     */\r\n    say = () => console.log(`Patient: ${this.firstName} ${this.lastName} - ${this.dateOfBirth.toString()}`);\r\n\r\n    /**\r\n     * Prints the patient's ID to the console. For debugging.\r\n     */\r\n    sayId = () => console.log(`Patient ID: ${this.id}`);\r\n\r\n    /**\r\n     * Gets the patient's full name.\r\n     * @returns {string} The patient's full name.\r\n     */\r\n    name = () => this.firstName + \" \" + this.lastName;\r\n\r\n    /**\r\n     * Get's the patient's age.\r\n     * @returns {number} The patient's age.\r\n     */\r\n    age = () => new Date().getFullYear() - new Date(this.dateOfBirth).getFullYear();\r\n\r\n    /**\r\n     * Generates the patient's ID. This is done automatically when creating a new patient.\r\n     * @param {number} firstNameChars - The number of characters from the patient's first name to include in the ID.\r\n     * @param {number} lastNameChars - The number of characters from the patient's last name to include in the ID.\r\n     * @returns {string} The patient's generated ID.\r\n     */\r\n    generateId(firstNameChars = 4, lastNameChars = 4) {\r\n        const sanitizedFirstName = this.firstName.replace(/[^a-zA-Z]/g, '').toUpperCase();\r\n        const sanitizedLastName = this.lastName.replace(/[^a-zA-Z]/g, '').toUpperCase();\r\n\r\n        const truncatedFirstName = sanitizedFirstName.slice(0, firstNameChars).padEnd(firstNameChars, 'X');\r\n        const truncatedLastName = sanitizedLastName.slice(0, lastNameChars).padEnd(lastNameChars, 'X');\r\n\r\n        const formattedDateOfBirth = this.dateOfBirth\r\n            .toLocaleDateString('en-US', { year: '2-digit', month: '2-digit', day: '2-digit' })\r\n            .replace(/\\//g, '');\r\n\r\n        const newId = `${truncatedLastName}${truncatedFirstName}${formattedDateOfBirth}`;\r\n\r\n        return newId;\r\n    }\r\n}\r\n\r\n/**\r\n * Formats a date into the expected format for the patient's id. MMDDYY\r\n * @param {date} date - The date to format.\r\n * @returns {string} The formatted date for the patient's ID.\r\n */\r\nfunction formatDateStringForId(date) {\r\n    date = new Date(date);\r\n\r\n    const month = (date.getMonth() + 1);\r\n    const day = date.getDate();\r\n    const year = date.getFullYear().toString().substring(2);\r\n\r\n    return `${month.toString().padStart(2, \"0\")}${day.toString().padStart(2, \"0\")}${year}`;\r\n}\r\n\r\nmodule.exports = {\r\n    Patient\r\n}\r\n\r\nwindow.Patient = Patient;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Patient from \"./patient.js\";\r\n\r\n// Regular expressions\r\nconst regexName = /^[a-zA-Z]+ [a-zA-Z]+$/;\r\nconst regexMedicalRecordNumber = /^[a-zA-Z]+ [a-zA-Z]+$/;\r\n\r\nString.prototype.fillWithCharacter = function(character, desiredLength) {\r\n  let newStr = this;\r\n\r\n  if(newStr.length < desiredLength)\r\n    newStr = newStr.padEnd(desiredLength, character);\r\n\r\n  return newStr;\r\n}\r\n\r\nfunction validate(regex, value) {\r\n  return regex.test(value);\r\n}\r\n\r\nexport function createPatient(_firstName, _lastName, _dateOfBirth) {\r\n  let patient = new Patient(_firstName, _lastName, _dateOfBirth);\r\n\r\n  return patient;\r\n}\r\n"],"names":["Patient","firstName","lastName","dateOfBirth","_this","idFirstNameCharCount","arguments","length","undefined","_classCallCheck","_defineProperty","console","log","concat","toString","id","Date","getFullYear","trim","generateId","_createClass","key","value","firstNameChars","lastNameChars","sanitizedFirstName","replace","toUpperCase","sanitizedLastName","truncatedFirstName","slice","padEnd","truncatedLastName","formattedDateOfBirth","toLocaleDateString","year","month","day","newId","formatDateStringForId","date","getMonth","getDate","substring","padStart","module","exports","window","regexName","regexMedicalRecordNumber","String","prototype","fillWithCharacter","character","desiredLength","newStr","validate","regex","test","createPatient","_firstName","_lastName","_dateOfBirth","patient"],"sourceRoot":""}